ANALYZED-FILE
========================================================= 
=>CONSTANTS
 @ phys_Prandtl_ = 0.708
 @ phys_cp_ = 1006
 @ rhoRef_ = 1.2
 @ TRef_ = 300
 @ pRef_ = 101325
 @ phys_gammaGaz_ = 1.4
 @ muRef_ = 1.716E-05
 @ Tinf_ = 293.111
 @ Tsuther_ = 110.555
 @ gravity_vect_x = 0
 @ gravity_vect_y = 0
 @ gravity_vect_z = -9.81
 @ gravity_coord_x = 0
 @ gravity_coord_y = 0
 @ gravity_coord_z = 0

=>CFD_VARIABLES
 @ StaticPressure
 @ Vx (VrCylinder)
 @ Vy (VtCylinder)
 @ Vz (VaCylinder)
 @ StaticTemperature
 @ Density
 @ Beta_Preco
 @ AbsoluteTotalEnergy
 @ AbsoluteTotalEnthalpy
 @ SoundSpeed
 @ Viscosity
 @ Conductivity
 @ Energy
 @ Enthalpy
 @ Cp
 @ Prandtl
 @ Gamma
 @ RGas
 @ UTau # only available when a turbulence model with wall functions is selected or when a user-defined wall function is added
 @ TTau # only available when a turbulence model with wall functions is selected or when a user-defined wall function is added

=>GEOMETRIC_VARIABLES
 @ xCoord, yCoord, zCoord  (rCoord, tCoord, aCoord) 
 @ xfaceN, yfaceN, zfaceN
 @ BFaceSurface
 @ CellVolume
 @ distanceToWall
 @ dn #only avaiable in boundary conditions#


=>FLUID_PROPERTIES 
@EOS_DATABASE: Perfect gas
->EOS_RELATION: Density 
->EXPRESSION: StaticPressure/((phys_gammaGaz_-1)/phys_gammaGaz_*phys_cp_*StaticTemperature)
->EOS_RELATION: Temperature 
->EXPRESSION: (AbsoluteTotalEnthalpy - 0.5*(Vx*Vx+Vy*Vy+Vz*Vz)) / phys_cp_ 
->EOS_RELATION: Pressure_From_Pt_Tt 
->EXPRESSION:  Pt * pow(StaticTemperature/Tt , phys_gammaGaz_/(phys_gammaGaz_-1))  
->EOS_RELATION: Temperature_From_Tt 
->EXPRESSION: Tt - 0.5*(Vx*Vx+Vy*Vy+Vz*Vz)/phys_cp_ 
->EOS_RELATION: Temperature_From_Pt_Tt_M2 
->EXPRESSION: Tt / (1 + (phys_gammaGaz_-1)/2. * M2) 
->EOS_RELATION: TotalPressure_From_Tt 
->EXPRESSION: StaticPressure * pow(Tt/StaticTemperature , phys_gammaGaz_/(phys_gammaGaz_-1)) 
->EOS_RELATION: TotalTemperature 
->EXPRESSION: StaticTemperature + 0.5*(Vx*Vx+Vy*Vy+Vz*Vz)/phys_cp_  
->EOS_RELATION: SoundSpeed 
->EXPRESSION: sqrt(phys_gammaGaz_*phys_RGaz_*StaticTemperature) 
->EOS_RELATION: Enthalpy 
->EXPRESSION: phys_cp_*StaticTemperature  
->EOS_RELATION: Energy 
->EXPRESSION: phys_cp_/phys_gammaGaz_*StaticTemperature 
->EOS_RELATION: Cp 
->EXPRESSION: phys_cp_ 
->EOS_RELATION: Gamma 
->EXPRESSION: phys_gammaGaz_ 

@TRANSP_PROPERTY_CALCULATOR: Viscosity calculator
->RELATION: Viscosity 
->EXPRESSION: IF(Tinf_ <= 120.0) IF(StaticTemperature<=120.0) muRef_ * StaticTemperature/Tinf_ \                
                                 ELSE                         muRef_ * sqrt(StaticTemperature/120.0) * (StaticTemperature/Tinf_) * (Tsuther_+120.0) / (StaticTemperature+Tsuther_)  \                
              ELSE               IF(StaticTemperature<=120.0) (muRef_/Tinf_) * sqrt(120.0/Tinf_) * (Tinf_+Tsuther_) / (120 + Tsuther_) * StaticTemperature \                
                                 ELSE                         muRef_ * sqrt(StaticTemperature/Tinf_) * (StaticTemperature/Tinf_) * (Tinf_+Tsuther_) / (StaticTemperature+Tsuther_) 
@TRANSP_PROPERTY_CALCULATOR: Thermal Conductivity calculator
->RELATION: Conductivity 
->EXPRESSION: Cp / phys_Prandtl_ * Viscosity 

=>EQUATIONS

@ PDE: ContinuityEquation
@ PDE: MomentumXEquation
@ PDE: MomentumYEquation
@ PDE: MomentumZEquation
@ PDE: EnergyEquation

=>INTERNAL_BOUNDARY_CONDITIONS
@ InternalBC_SOL: cil_group_0 [0] 
->Imposed_Physical_Variables: "Heat-Flux" 
@ InternalBC_SOL: cil_group_1 [1] 
@ InternalBC_OUT: cil_group_4 [4] 
->Imposed_Physical_Variables: "Static Pressure" 
@ InternalBC_INL: cil_group_5 [5] 
->Imposed_Physical_Variables: "Absolute Total Pressure", "Absolute Total Temperature" 


=>ALGEBRAIC_DIFFUSION_COEFFICIENTS
@ ALGDIFFCOEFF: EffectiveViscosity
->EXPRESSION(MomentumXEquation):Viscosity            #will be applied to the three momentum + the energy equations
@ ALGDIFFCOEFF: EffectiveConductivity
->EXPRESSION(EnergyEquation):Conductivity            #will be applied to the energy equation

=>SOURCETERMS
@ SOURCE: GravityTerm
->EXPRESSION(MomentumXEquation): Density*gravity_vect_x                   
->EXPRESSION(MomentumYEquation): Density*gravity_vect_y                   
->EXPRESSION(MomentumZEquation): Density*gravity_vect_z                   
->EXPRESSION(EnergyEquation): Density*(Vx*gravity_vect_x + Vy*gravity_vect_y + Vz*gravity_vect_z)

=>AUXTERMS
